/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include "ValidatorNV10.hpp"
#include "StateMachine.hpp"
#include "NV10Control.hpp"
using namespace NV10Control;
using namespace StateMachine;
using namespace ValidatorNV10;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_SpdlogLevels_1t_1Code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::SpdlogLevels_t *arg1 = (ValidatorNV10::SpdlogLevels_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::SpdlogLevels_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Code = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_SpdlogLevels_1t_1Code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::SpdlogLevels_t *arg1 = (ValidatorNV10::SpdlogLevels_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::SpdlogLevels_t **)&jarg1; 
  result = (int) ((arg1)->Code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_SpdlogLevels_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorNV10::SpdlogLevels_t *arg1 = (ValidatorNV10::SpdlogLevels_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::SpdlogLevels_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_SpdlogLevels_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorNV10::SpdlogLevels_t *arg1 = (ValidatorNV10::SpdlogLevels_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::SpdlogLevels_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1SpdlogLevels_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorNV10::SpdlogLevels_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorNV10::SpdlogLevels_t *)new ValidatorNV10::SpdlogLevels_t();
  *(ValidatorNV10::SpdlogLevels_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1SpdlogLevels_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorNV10::SpdlogLevels_t *arg1 = (ValidatorNV10::SpdlogLevels_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorNV10::SpdlogLevels_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_Bills_1t_1Channel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::Bills_t *arg1 = (ValidatorNV10::Bills_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::Bills_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Channel = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_Bills_1t_1Channel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::Bills_t *arg1 = (ValidatorNV10::Bills_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::Bills_t **)&jarg1; 
  result = (int) ((arg1)->Channel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_Bills_1t_1Bill_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::Bills_t *arg1 = (ValidatorNV10::Bills_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::Bills_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Bill = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_Bills_1t_1Bill_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::Bills_t *arg1 = (ValidatorNV10::Bills_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::Bills_t **)&jarg1; 
  result = (int) ((arg1)->Bill);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1Bills_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorNV10::Bills_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorNV10::Bills_t *)new ValidatorNV10::Bills_t();
  *(ValidatorNV10::Bills_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1Bills_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorNV10::Bills_t *arg1 = (ValidatorNV10::Bills_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorNV10::Bills_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_ErrorCodes_1t_1Code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::ErrorCodes_t *arg1 = (ValidatorNV10::ErrorCodes_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::ErrorCodes_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Code = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_ErrorCodes_1t_1Code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::ErrorCodes_t *arg1 = (ValidatorNV10::ErrorCodes_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::ErrorCodes_t **)&jarg1; 
  result = (int) ((arg1)->Code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_ErrorCodes_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorNV10::ErrorCodes_t *arg1 = (ValidatorNV10::ErrorCodes_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::ErrorCodes_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_ErrorCodes_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorNV10::ErrorCodes_t *arg1 = (ValidatorNV10::ErrorCodes_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::ErrorCodes_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_ErrorCodes_1t_1Priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::ErrorCodes_t *arg1 = (ValidatorNV10::ErrorCodes_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::ErrorCodes_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Priority = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_ErrorCodes_1t_1Priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::ErrorCodes_t *arg1 = (ValidatorNV10::ErrorCodes_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::ErrorCodes_t **)&jarg1; 
  result = (int) ((arg1)->Priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1ErrorCodes_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorNV10::ErrorCodes_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorNV10::ErrorCodes_t *)new ValidatorNV10::ErrorCodes_t();
  *(ValidatorNV10::ErrorCodes_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1ErrorCodes_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorNV10::ErrorCodes_t *arg1 = (ValidatorNV10::ErrorCodes_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorNV10::ErrorCodes_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SerialPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SerialPort = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SerialPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->SerialPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SuccessConnect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SuccessConnect = arg2;
}


SWIGEXPORT jboolean JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SuccessConnect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (bool) ((arg1)->SuccessConnect);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1PortO_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PortO = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1PortO_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->PortO);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1PrevResponseSeq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PrevResponseSeq = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1PrevResponseSeq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->PrevResponseSeq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LengthData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LengthData = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LengthData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->LengthData);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ErrorOCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorOCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ErrorOCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->ErrorOCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ErrorOMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ErrorOMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ErrorOMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (std::string *) & ((arg1)->ErrorOMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ErrorOPriority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorOPriority = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ErrorOPriority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->ErrorOPriority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1EventOCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EventOCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1EventOCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->EventOCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1EventOMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->EventOMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1EventOMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (std::string *) & ((arg1)->EventOMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1EventOPriority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EventOPriority = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1EventOPriority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->EventOPriority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LROCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LROCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LROCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->LROCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LROMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->LROMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LROMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (std::string *) & ((arg1)->LROMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LROPriority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LROPriority = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LROPriority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->LROPriority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1AdEventOCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AdEventOCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1AdEventOCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->AdEventOCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1AdEventOMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->AdEventOMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1AdEventOMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (std::string *) & ((arg1)->AdEventOMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1AdEventOPriority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AdEventOPriority = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1AdEventOPriority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->AdEventOPriority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Bill_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Bill = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Bill_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->Bill);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Channel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Channel = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Channel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->Channel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LoggerLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LoggerLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LoggerLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->LoggerLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LogFilePath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->LogFilePath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LogFilePath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (std::string *) & ((arg1)->LogFilePath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1MaxPorts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxPorts = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1MaxPorts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int) ((arg1)->MaxPorts);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1NV10Class(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorNV10::NV10Class *)new ValidatorNV10::NV10Class();
  *(ValidatorNV10::NV10Class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1NV10Class(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SearchSpdlogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  ValidatorNV10::SpdlogLevels_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchSpdlogLevel(arg2);
  *(ValidatorNV10::SpdlogLevels_t **)&jresult = new ValidatorNV10::SpdlogLevels_t(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SetSpdlogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  (arg1)->SetSpdlogLevel();
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SearchErrorCodeExComm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  ValidatorNV10::ErrorCodes_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchErrorCodeExComm(arg2);
  *(ValidatorNV10::ErrorCodes_t **)&jresult = new ValidatorNV10::ErrorCodes_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SearchBill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  ValidatorNV10::Bills_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchBill(arg2);
  *(ValidatorNV10::Bills_t **)&jresult = new ValidatorNV10::Bills_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SearchErrorCodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  ValidatorNV10::ErrorCodes_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchErrorCodes(arg2);
  *(ValidatorNV10::ErrorCodes_t **)&jresult = new ValidatorNV10::ErrorCodes_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SearchEventCodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  ValidatorNV10::ErrorCodes_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchEventCodes(arg2);
  *(ValidatorNV10::ErrorCodes_t **)&jresult = new ValidatorNV10::ErrorCodes_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SearchLastReject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  ValidatorNV10::ErrorCodes_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchLastReject(arg2);
  *(ValidatorNV10::ErrorCodes_t **)&jresult = new ValidatorNV10::ErrorCodes_t(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1StIdle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->StIdle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1StConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->StConnect();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1StDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->StDisable();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1StEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->StEnable();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1StPolling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->StPolling();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1StCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->StCheck();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1StError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->StError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1InitLogger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->InitLogger((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ConnectSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->ConnectSerial(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ScanPorts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->ScanPorts();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1GetSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->GetSeq();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1CalcCRC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  std::vector< unsigned char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->CalcCRC(arg2);
  *(std::vector< unsigned char > **)&jresult = new std::vector< unsigned char >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1BuildCmd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  std::vector< unsigned char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->BuildCmd(arg2);
  *(std::vector< unsigned char > **)&jresult = new std::vector< unsigned char >(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SendingCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->SendingCommand(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1ExecuteCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->ExecuteCommand(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1HandleResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->HandleResponse(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1HandleCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->HandleCode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1HandleEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->HandleEvent(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1HandleLRC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->HandleLRC(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1HandleChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->HandleChannel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1DisplayOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->DisplayOn();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1DisplayOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->DisplayOff();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1SetChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->SetChannels();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->Enable();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->Disable();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Poll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->Poll();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1LastReject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->LastReject();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->Sync();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Hold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->Hold();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10Class_1Reject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (int)(arg1)->Reject();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1StateMachine_1t_1CurrState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StateMachine::SMClass::StateMachine_t *arg1 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  StateMachine::SMClass::State_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass::StateMachine_t **)&jarg1; 
  arg2 = (StateMachine::SMClass::State_t)jarg2; 
  if (arg1) (arg1)->CurrState = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1StateMachine_1t_1CurrState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass::StateMachine_t *arg1 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  StateMachine::SMClass::State_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass::StateMachine_t **)&jarg1; 
  result = (StateMachine::SMClass::State_t) ((arg1)->CurrState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1SMClass_1StateMachine_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StateMachine::SMClass::StateMachine_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StateMachine::SMClass::StateMachine_t *)new StateMachine::SMClass::StateMachine_t();
  *(StateMachine::SMClass::StateMachine_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1SMClass_1StateMachine_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StateMachine::SMClass::StateMachine_t *arg1 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StateMachine::SMClass::StateMachine_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1SMClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ValidatorNV10::NV10Class *arg1 = (ValidatorNV10::NV10Class *) 0 ;
  StateMachine::SMClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorNV10::NV10Class **)&jarg1; 
  result = (StateMachine::SMClass *)new StateMachine::SMClass(arg1);
  *(StateMachine::SMClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1SM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::StateMachine_t *arg2 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = *(StateMachine::SMClass::StateMachine_t **)&jarg2; 
  if (arg1) (arg1)->SM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1SM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::StateMachine_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (StateMachine::SMClass::StateMachine_t *)& ((arg1)->SM);
  *(StateMachine::SMClass::StateMachine_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1LS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::StateMachine_t *arg2 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = *(StateMachine::SMClass::StateMachine_t **)&jarg2; 
  if (arg1) (arg1)->LS = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1LS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::StateMachine_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (StateMachine::SMClass::StateMachine_t *)& ((arg1)->LS);
  *(StateMachine::SMClass::StateMachine_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1Evento_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::Event_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = (StateMachine::SMClass::Event_t)jarg2; 
  if (arg1) (arg1)->Evento = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1Evento_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::Event_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (StateMachine::SMClass::Event_t) ((arg1)->Evento);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1Estado_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::State_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = (StateMachine::SMClass::State_t)jarg2; 
  if (arg1) (arg1)->Estado = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1Estado_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::State_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (StateMachine::SMClass::State_t) ((arg1)->Estado);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1InitStateMachine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  (arg1)->InitStateMachine();
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1RunCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (int)(arg1)->RunCheck();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1StateMachineRun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::Event_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = (StateMachine::SMClass::Event_t)jarg2; 
  result = (int)(arg1)->StateMachineRun(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_SMClass_1StateMachineGetStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::State_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = (StateMachine::SMClass::State_t)jarg2; 
  result = (char *)(arg1)->StateMachineGetStateName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1SMClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_Response_1t_1StatusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::Response_t *arg1 = (NV10Control::Response_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::Response_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StatusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_Response_1t_1StatusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::Response_t *arg1 = (NV10Control::Response_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::Response_t **)&jarg1; 
  result = (int) ((arg1)->StatusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_Response_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NV10Control::Response_t *arg1 = (NV10Control::Response_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::Response_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_Response_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NV10Control::Response_t *arg1 = (NV10Control::Response_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::Response_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1Response_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NV10Control::Response_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NV10Control::Response_t *)new NV10Control::Response_t();
  *(NV10Control::Response_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1Response_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NV10Control::Response_t *arg1 = (NV10Control::Response_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NV10Control::Response_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_BillError_1t_1StatusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::BillError_t *arg1 = (NV10Control::BillError_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::BillError_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StatusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_BillError_1t_1StatusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::BillError_t *arg1 = (NV10Control::BillError_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::BillError_t **)&jarg1; 
  result = (int) ((arg1)->StatusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_BillError_1t_1Bill_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::BillError_t *arg1 = (NV10Control::BillError_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::BillError_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Bill = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_BillError_1t_1Bill_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::BillError_t *arg1 = (NV10Control::BillError_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::BillError_t **)&jarg1; 
  result = (int) ((arg1)->Bill);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_BillError_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NV10Control::BillError_t *arg1 = (NV10Control::BillError_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::BillError_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_BillError_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NV10Control::BillError_t *arg1 = (NV10Control::BillError_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::BillError_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1BillError_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NV10Control::BillError_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NV10Control::BillError_t *)new NV10Control::BillError_t();
  *(NV10Control::BillError_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1BillError_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NV10Control::BillError_t *arg1 = (NV10Control::BillError_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NV10Control::BillError_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1Version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Version = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1Version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Version);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1Device_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Device = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1Device_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  result = (int) ((arg1)->Device);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1ErrorType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorType = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1ErrorType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  result = (int) ((arg1)->ErrorType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1ErrorCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1ErrorCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  result = (int) ((arg1)->ErrorCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1AditionalInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->AditionalInfo = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1AditionalInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  result = (std::string *) & ((arg1)->AditionalInfo);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1Priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Priority = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_TestStatus_1t_1Priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  result = (int) ((arg1)->Priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1TestStatus_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NV10Control::TestStatus_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NV10Control::TestStatus_t *)new NV10Control::TestStatus_t();
  *(NV10Control::TestStatus_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1TestStatus_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NV10Control::TestStatus_t *arg1 = (NV10Control::TestStatus_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NV10Control::TestStatus_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_GlobalVariables_1NV10Object_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NV10Control::GlobalVariables *arg1 = (NV10Control::GlobalVariables *) 0 ;
  ValidatorNV10::NV10Class *arg2 = (ValidatorNV10::NV10Class *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NV10Control::GlobalVariables **)&jarg1; 
  arg2 = *(ValidatorNV10::NV10Class **)&jarg2; 
  if (arg1) (arg1)->NV10Object = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_GlobalVariables_1NV10Object_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::GlobalVariables *arg1 = (NV10Control::GlobalVariables *) 0 ;
  ValidatorNV10::NV10Class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::GlobalVariables **)&jarg1; 
  result = (ValidatorNV10::NV10Class *)& ((arg1)->NV10Object);
  *(ValidatorNV10::NV10Class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_GlobalVariables_1NV10Pointer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NV10Control::GlobalVariables *arg1 = (NV10Control::GlobalVariables *) 0 ;
  ValidatorNV10::NV10Class *arg2 = (ValidatorNV10::NV10Class *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NV10Control::GlobalVariables **)&jarg1; 
  arg2 = *(ValidatorNV10::NV10Class **)&jarg2; 
  if (arg1) (arg1)->NV10Pointer = arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_GlobalVariables_1NV10Pointer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::GlobalVariables *arg1 = (NV10Control::GlobalVariables *) 0 ;
  ValidatorNV10::NV10Class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::GlobalVariables **)&jarg1; 
  result = (ValidatorNV10::NV10Class *) ((arg1)->NV10Pointer);
  *(ValidatorNV10::NV10Class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_GlobalVariables_1SMObject_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NV10Control::GlobalVariables *arg1 = (NV10Control::GlobalVariables *) 0 ;
  StateMachine::SMClass *arg2 = (StateMachine::SMClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NV10Control::GlobalVariables **)&jarg1; 
  arg2 = *(StateMachine::SMClass **)&jarg2; 
  if (arg1) (arg1)->SMObject = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_GlobalVariables_1SMObject_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::GlobalVariables *arg1 = (NV10Control::GlobalVariables *) 0 ;
  StateMachine::SMClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::GlobalVariables **)&jarg1; 
  result = (StateMachine::SMClass *)& ((arg1)->SMObject);
  *(StateMachine::SMClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1GlobalVariables(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NV10Control::GlobalVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NV10Control::GlobalVariables *)new NV10Control::GlobalVariables();
  *(NV10Control::GlobalVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1GlobalVariables(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NV10Control::GlobalVariables *arg1 = (NV10Control::GlobalVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NV10Control::GlobalVariables **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1PortO_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PortO = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1PortO_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (int) ((arg1)->PortO);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1Path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1Path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (std::string *) & ((arg1)->Path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1LogLvl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LogLvl = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1LogLvl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (int) ((arg1)->LogLvl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1MaximumPorts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaximumPorts = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1MaximumPorts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (int) ((arg1)->MaximumPorts);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1Globals_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::GlobalVariables *arg2 = (NV10Control::GlobalVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  arg2 = *(NV10Control::GlobalVariables **)&jarg2; 
  if (arg1) (arg1)->Globals = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1Globals_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::GlobalVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (NV10Control::GlobalVariables *)& ((arg1)->Globals);
  *(NV10Control::GlobalVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_new_1NV10ControlClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NV10Control::NV10ControlClass *)new NV10Control::NV10ControlClass();
  *(NV10Control::NV10ControlClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_delete_1NV10ControlClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1InitLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  (arg1)->InitLog();
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1Connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (arg1)->Connect();
  *(NV10Control::Response_t **)&jresult = new NV10Control::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1CheckDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (arg1)->CheckDevice();
  *(NV10Control::Response_t **)&jresult = new NV10Control::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1StartReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (arg1)->StartReader();
  *(NV10Control::Response_t **)&jresult = new NV10Control::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1GetBill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::BillError_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (arg1)->GetBill();
  *(NV10Control::BillError_t **)&jresult = new NV10Control::BillError_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1ModifyChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  int arg2 ;
  NV10Control::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->ModifyChannels(arg2);
  *(NV10Control::Response_t **)&jresult = new NV10Control::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1StopReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (arg1)->StopReader();
  *(NV10Control::Response_t **)&jresult = new NV10Control::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1Reject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (arg1)->Reject();
  *(NV10Control::Response_t **)&jresult = new NV10Control::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_nv10_NV10ControlJNI_NV10ControlClass_1TestStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NV10Control::NV10ControlClass *arg1 = (NV10Control::NV10ControlClass *) 0 ;
  NV10Control::TestStatus_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NV10Control::NV10ControlClass **)&jarg1; 
  result = (arg1)->TestStatus();
  *(NV10Control::TestStatus_t **)&jresult = new NV10Control::TestStatus_t(result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

